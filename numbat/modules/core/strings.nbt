use core::scalar
use core::functions

fn str_length(s: String) -> Scalar

fn str_slice(s: String, start: Scalar, end: Scalar) -> String

fn chr(n: Scalar) -> String

fn str_append(a: String, b: String) -> String = "{a}{b}"

fn str_contains(haystack: String, needle: String) -> Bool =
  if str_length(haystack) == 0
    then false
    else if str_slice(haystack, 0, str_length(needle)) == needle
      then true
      else str_contains(str_slice(haystack, 1, str_length(haystack)), needle)

fn str_replace(s: String, pattern: String, replacement: String) -> String =
  if pattern == ""
    then s
    else if str_contains(s, pattern)
           then if str_slice(s, 0, str_length(pattern)) == pattern
               then str_replace(str_append(replacement, str_slice(s, str_length(pattern), str_length(s))), pattern, replacement)
               else str_append(str_slice(s, 0, 1), str_replace(str_slice(s, 1, str_length(s)), pattern, replacement))
           else s

fn str_repeat(a: String, n: Scalar) -> String =
  if n > 0
    then str_append(a, str_repeat(a, n - 1))
    else ""

fn _bin_digit(x: Scalar) -> String =
  chr(48 + mod(x, 2))

fn _oct_digit(x: Scalar) -> String =
  chr(48 + mod(x, 8))

fn _hex_digit(x: Scalar) -> String =
    if mod(x, 16) < 10 then chr(48 + mod(x, 16)) else chr(97 + mod(x, 16) - 10)

fn bin(x: Scalar) -> String =
  if x < 0
    then "-{bin(-x)}"
    else if x < 2
      then "0b{chr(48 + x)}"
      else str_append(bin(floor(x / 2)), _bin_digit(mod(x, 2)))

fn oct(x: Scalar) -> String =
  if x < 0
    then "-{oct(-x)}"
    else if x < 8
      then "0o{chr(48 + x)}"
      else str_append(oct(floor(x / 8)), _oct_digit(x))

fn hex(x: Scalar) -> String =
  if x < 0
    then "-{hex(-x)}"
    else if floor(x / 16) == 0
      then str_append("0x", _hex_digit(x))
      else str_append(hex(floor(x / 16)), _hex_digit(x))
